<!-- Forum Grid START -->
<div class="flex h-screen bg-white">
    <!-- Left Sidebar -->
    <div class="w-[400px] border-r flex flex-col">
        <!-- Search Bar -->
        <div class="p-4 border-b">
            <div class="relative">
                <i class="fas fa-search absolute left-3 top-2.5 h-4 w-4 text-gray-500"></i>
                <input type="text" 
                       id="forumSearch" 
                       placeholder="{% trans %}SEARCH_FORUMS_KEY{% endtrans %}" 
                       class="w-full pl-9 pr-4 py-2 rounded-lg bg-gray-100">
            </div>
        </div>

        <!-- Forum Tabs -->
        <div class="px-4 pt-4 border-b">
            <div class="flex space-x-1 mb-4">
                <button class="flex-1 px-3 py-2 text-sm font-medium rounded-lg bg-primary text-white" data-tab="all">
                    {% trans %}ALL_KEY{% endtrans %}
                </button>
                <button class="flex-1 px-3 py-2 text-sm font-medium text-gray-600 hover:bg-gray-100 rounded-lg" data-tab="active">
                    {% trans %}ACTIVE_KEY{% endtrans %}
                </button>
                <button class="flex-1 px-3 py-2 text-sm font-medium text-gray-600 hover:bg-gray-100 rounded-lg" data-tab="unread">
                    {% trans %}UNREAD_KEY{% endtrans %}
                </button>
            </div>
        </div>

        <!-- Forums List -->
        <div class="flex-1 overflow-y-auto" id="forumsGrid">
            {% for forum in forums %}
                <div class="flex items-center gap-3 p-4 hover:bg-gray-100 cursor-pointer forum-card" data-forum-id="{{ forum.id }}">
                    <div class="w-12 h-12 rounded-full bg-primary flex items-center justify-center text-white">
                        <span class="text-lg font-semibold">{{ forum.subject|slice(0, 1)|upper }}</span>
                    </div>
                    <div class="flex-1 min-w-0">
                        <div class="flex justify-between items-start">
                            <p class="font-medium truncate">{{ forum.subject }}</p>
                            <span class="text-xs text-gray-500">{{ forum.lastActivity|ago }}</span>
                        </div>
                        <p class="text-sm text-gray-500 truncate">
                            {{ forum.teacherName }} â€¢ {{ forum.onlineCount }} {% trans %}ONLINE_KEY{% endtrans %}
                        </p>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="flex-1 flex flex-col" id="chatContainer" style="display: none;">
        {{ include('student/chat/forum/_chat.html.twig', {
            forum: null,
            messages: [],
            onlineTeachers: [],
            onlineStudents: []
        }) }}
    </div>
</div>

<!-- Add necessary styles -->
<style>
.forum-card.active {
    background-color: #f0f2f5;
}

.forum-card .card {
    transition: transform 0.2s;
    cursor: pointer;
}

.forum-card .card:hover {
    transform: translateY(-5px);
}

.search-bar .form-control:focus {
    box-shadow: none;
}

.avatar {
    position: relative;
}

.avatar-xs {
    width: 1.5rem;
    height: 1.5rem;
}

.avatar-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
</style>

<!-- Add forum selection handling -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const forumsGrid = document.getElementById('forumsGrid');
    const chatContainer = document.getElementById('chatContainer');
    const forumSearch = document.getElementById('forumSearch');
    let currentForumId = null;
    let websocket = null;

    // Initialize chat for a forum
    function initializeForumChat(forumId) {
        currentForumId = forumId;
        
        // Disconnect existing WebSocket if any
        if (websocket) {
            websocket.disconnect();
        }

        // Create new WebSocket connection
        websocket = new ForumWebSocket(forumId);

        // Listen for WebSocket events
        document.addEventListener(`forum:message`, handleWebSocketMessage);
        document.addEventListener(`forum:typing`, handleTypingStatus);
        document.addEventListener(`forum:presence`, handlePresenceUpdate);
        document.addEventListener(`forum:connected`, handleWebSocketConnected);
        document.addEventListener(`forum:disconnected`, handleWebSocketDisconnected);
    }

    // Forum card click handler
    forumsGrid.addEventListener('click', function(e) {
        const forumCard = e.target.closest('.forum-card');
        if (!forumCard) return;

        const forumId = forumCard.dataset.forumId;
        initializeForumChat(forumId);

        // Hide grid, show chat
        document.querySelector('.forum-grid').style.display = 'none';
        chatContainer.style.display = 'block';

        // Load forum messages
        loadForumMessages(forumId);
    });

    // Back button handler
    document.querySelector('.back-to-forums').addEventListener('click', function() {
        chatContainer.style.display = 'none';
        document.querySelector('.forum-grid').style.display = 'block';
        currentForumId = null;
    });

    // Search functionality
    forumSearch.addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        document.querySelectorAll('.forum-card').forEach(card => {
            const subject = card.querySelector('p.font-medium').textContent.toLowerCase();
            card.style.display = subject.includes(searchTerm) ? '' : 'none';
        });
    });

    // Load forum messages
    function loadForumMessages(forumId) {
        fetch(`{{ path('app_student_chat_messages', {'subject': '__ID__'}) }}`.replace('__ID__', forumId))
            .then(response => response.json())
            .then(data => {
                // Update chat interface with forum data
                document.querySelector('.chat-messages').innerHTML = '';
                if (data.messages) {
                    data.messages.forEach(message => {
                        const messageHtml = createMessageElement(message);
                        document.querySelector('.chat-messages').insertAdjacentHTML('beforeend', messageHtml);
                    });
                }
                // Update online users
                updateOnlineUsers(data.onlineTeachers, data.onlineStudents);
                // Scroll to bottom
                const messagesContainer = document.querySelector('.chat-messages-container');
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            });
    }

    // WebSocket event handlers
    function handleWebSocketMessage(event) {
        const { message } = event.detail;
        if (message && event.detail.forumId === currentForumId) {
            const messageHtml = createMessageElement(message);
            document.querySelector('.chat-messages').insertAdjacentHTML('beforeend', messageHtml);
            scrollToBottom();
        }
    }

    function handleTypingStatus(event) {
        const { userId, isTyping } = event.detail;
        const typingIndicator = document.querySelector('.typing-indicator');
        
        if (event.detail.forumId === currentForumId) {
            if (isTyping) {
                typingIndicator.textContent = 'Someone is typing...';
                typingIndicator.classList.remove('d-none');
            } else {
                typingIndicator.classList.add('d-none');
            }
        }
    }

    function handlePresenceUpdate(event) {
        const { onlineTeachers, onlineStudents } = event.detail;
        if (event.detail.forumId === currentForumId) {
            updateOnlineUsers(onlineTeachers, onlineStudents);
        }
    }

    function handleWebSocketConnected(event) {
        if (event.detail.forumId === currentForumId) {
            console.log('Connected to chat server');
            document.querySelector('.connection-status').classList.add('d-none');
        }
    }

    function handleWebSocketDisconnected(event) {
        if (event.detail.forumId === currentForumId) {
            console.log('Disconnected from chat server');
            document.querySelector('.connection-status').classList.remove('d-none');
        }
    }

    // Update message sending to use WebSocket
    document.querySelector('.chat-input-form').addEventListener('submit', function(e) {
        e.preventDefault();
        const input = this.querySelector('input[type="text"]');
        const message = input.value.trim();
        
        if (message && websocket) {
            const success = websocket.sendMessage(message);
            if (success) {
                input.value = '';
            }
        }
    });

    // Add typing indicator
    let typingTimeout;
    document.querySelector('.chat-input').addEventListener('input', function() {
        if (websocket) {
            clearTimeout(typingTimeout);
            websocket.sendTypingStatus(true);
            
            typingTimeout = setTimeout(() => {
                websocket.sendTypingStatus(false);
            }, 1000);
        }
    });

    // Cleanup function
    function cleanup() {
        if (websocket) {
            websocket.disconnect();
        }
        document.removeEventListener(`forum:message`, handleWebSocketMessage);
        document.removeEventListener(`forum:typing`, handleTypingStatus);
        document.removeEventListener(`forum:presence`, handlePresenceUpdate);
        document.removeEventListener(`forum:connected`, handleWebSocketConnected);
        document.removeEventListener(`forum:disconnected`, handleWebSocketDisconnected);
    }

    // Initialize tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>
