{% extends 'student/base.html.twig' %}

{% block subTitle %}{% trans %}CHAT_TITLE_KEY{% endtrans %}{% endblock %}

{% block instructorBanner %}{% endblock %}

{% block pageContent %}
    {% if needsSetup %}
        {{ include('student/chat/_setup_modal.html.twig') }}
    {% endif %}

    <div class="row">
        {# Sidebar #}
        <div class="col-md-4 col-lg-3">
            <div class="card h-100">
                <div class="card-header">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-0">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control bg-light border-0" id="subject-search" 
                               placeholder="{% trans %}SEARCH_SUBJECTS{% endtrans %}">
                    </div>
                </div>
                <div class="card-body p-0" style="overflow-y: auto;">
                    <div class="list-group list-group-flush" id="subject-list">
                        {% for subject in available_subjects %}
                            <a href="#" class="list-group-item list-group-item-action" data-subject-id="{{ subject.id }}">
                                <div class="d-flex align-items-center">
                                    <img src="{{ asset(subject.icon) }}" alt="{{ subject.name }}" 
                                         class="rounded-circle me-3" style="width: 48px; height: 48px;">
                                    <div>
                                        <h6 class="mb-1">{{ subject.name }}</h6>
                                        <small class="text-muted">{{ subject.teacherPersona.name }}</small>
                                    </div>
                                </div>
                            </a>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

        {# Chat Window #}
        <div class="col-md-8 col-lg-9">
            <div class="card h-100">
                <div class="card-header bg-white">
                    <div class="d-flex align-items-center">
                        <div>
                            <h5 class="mb-1" id="current-subject-name">{% trans %}SELECT_SUBJECT{% endtrans %}</h5>
                            <small class="text-success">
                                <i class="bi bi-circle-fill"></i>
                                <span>{% trans %}CONNECTED{% endtrans %}</span>
                            </small>
                        </div>
                    </div>
                </div>

                <div class="card-body" id="chat-messages" style="overflow-y: auto; height: calc(100vh - 400px);">
                    {% for message in messages %}
                        <div class="d-flex mb-3 {% if message.fromStudent %}justify-content-end{% endif %}">
                            <div class="{% if message.fromStudent %}bg-primary text-white{% else %}bg-light{% endif %} 
                                        rounded p-3" style="max-width: 75%;">
                                <div>{{ message.content }}</div>
                                <small class="{% if message.fromStudent %}text-white-50{% else %}text-muted{% endif %}">
                                    {{ message.createdAt|date('H:i') }}
                                </small>
                            </div>
                        </div>
                    {% endfor %}
                </div>

                <div class="card-footer bg-white">
                    <div class="input-group">
                        <textarea class="form-control" id="message-input" rows="1" 
                                  placeholder="{% trans %}TYPE_MESSAGE{% endtrans %}"></textarea>
                        <button class="btn btn-primary" id="send-button" type="button">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {# Error Toast #}
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
        <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" 
             aria-atomic="true" id="error-container">
            <div class="d-flex">
                <div class="toast-body" id="error-message"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('assets/js/chat/websocket.js') }}"></script>
    <script>
        window.WS_CONFIG = {
            reconnectAttempts: 5,
            reconnectDelay: 3000,
            debug: {{ app.debug ? 'true' : 'false' }}
        };

        document.addEventListener('DOMContentLoaded', function() {
            const chatSocket = new WebSocket('{{ websocket_url }}');
            const studentToken = '{{ student_token }}';
            const errorContainer = document.getElementById('error-container');
            const errorMessage = document.getElementById('error-message');
            const toast = new bootstrap.Toast(errorContainer);
            let currentSubjectId = null;

            function showError(message) {
                errorMessage.textContent = message;
                toast.show();
            }

            function appendMessage(message) {
                const messagesContainer = document.getElementById('chat-messages');
                const messageDiv = document.createElement('div');
                messageDiv.className = `d-flex mb-3 ${message.isOutgoing ? 'justify-content-end' : ''}`;
                
                const bubble = document.createElement('div');
                bubble.className = `${message.isOutgoing ? 'bg-primary text-white' : 'bg-light'} rounded p-3`;
                bubble.style.maxWidth = '75%';
                
                const content = document.createElement('div');
                content.textContent = message.content;
                
                const time = document.createElement('small');
                time.className = message.isOutgoing ? 'text-white-50' : 'text-muted';
                time.textContent = message.time;
                
                bubble.appendChild(content);
                bubble.appendChild(time);
                messageDiv.appendChild(bubble);
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            // WebSocket event handlers
            chatSocket.addEventListener('open', () => {
                chatSocket.send(JSON.stringify({
                    type: 'auth',
                    token: studentToken
                }));
            });

            chatSocket.addEventListener('message', (event) => {
                const data = JSON.parse(event.data);
                switch(data.type) {
                    case 'message':
                        appendMessage({
                            content: data.content,
                            time: new Date().toLocaleTimeString(),
                            isOutgoing: false
                        });
                        break;
                    case 'error':
                        showError(data.message);
                        break;
                }
            });

            chatSocket.addEventListener('close', () => {
                showError('{% trans %}CONNECTION_LOST{% endtrans %}');
            });

            chatSocket.addEventListener('error', () => {
                showError('{% trans %}CONNECTION_ERROR{% endtrans %}');
            });

            // Subject selection
            document.querySelectorAll('.list-group-item').forEach(item => {
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    document.querySelectorAll('.list-group-item').forEach(i => i.classList.remove('active'));
                    item.classList.add('active');
                    currentSubjectId = item.dataset.subjectId;
                    
                    const subjectName = item.querySelector('h6').textContent;
                    document.getElementById('current-subject-name').textContent = subjectName;
                    
                    chatSocket.send(JSON.stringify({
                        type: 'join',
                        subjectId: currentSubjectId
                    }));
                });
            });

            // Message sending
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');

            function sendMessage() {
                const content = messageInput.value.trim();
                if (!content || !currentSubjectId) return;

                chatSocket.send(JSON.stringify({
                    type: 'message',
                    content: content,
                    subjectId: currentSubjectId
                }));

                appendMessage({
                    content: content,
                    time: new Date().toLocaleTimeString(),
                    isOutgoing: true
                });

                messageInput.value = '';
            }

            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Subject search
            const searchInput = document.getElementById('subject-search');
            searchInput.addEventListener('input', () => {
                const query = searchInput.value.toLowerCase();
                document.querySelectorAll('.list-group-item').forEach(item => {
                    const name = item.querySelector('h6').textContent.toLowerCase();
                    const teacher = item.querySelector('small').textContent.toLowerCase();
                    item.style.display = name.includes(query) || teacher.includes(query) ? '' : 'none';
                });
            });

            {% if needsSetup %}
            const setupModal = new bootstrap.Modal(document.getElementById('setup-modal'));
            setupModal.show();
            {% endif %}
        });
    </script>
{% endblock %}
