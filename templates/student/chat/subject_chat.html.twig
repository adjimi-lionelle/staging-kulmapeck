<!DOCTYPE html>
<html lang="{{ app.request.locale }}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% trans %}CHAT_TITLE_KEY{% endtrans %}</title>
    
    {# Bootstrap CSS #}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css" rel="stylesheet">
    
    {# Custom CSS #}
    <link rel="stylesheet" href="{{ asset('css/subject_chat.css') }}">
    <style>
        body {
            background-color: var(--bs-light);
            min-height: 100vh;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
    {% if needsSetup %}
        {{ include('student/chat/_setup_modal.html.twig') }}
    {% endif %}

    <div class="chat-container">
        <div class="chat-wrapper">
            {# Sidebar #}
            <div class="sidebar">
                <div class="search-box">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" id="subject-search" placeholder="{% trans %}SEARCH_SUBJECTS{% endtrans %}">
                    </div>
                </div>
                <div class="subject-list" id="subject-list">
                    {% for subject in available_subjects %}
                        <div class="subject-item d-flex align-items-center" data-subject-id="{{ subject.id }}">
                            <div class="avatar-md me-3">
                                <img src="{{ asset(subject.icon) }}" alt="{{ subject.name }}" class="avatar-img">
                            </div>
                            <div>
                                <h6 class="mb-1">{{ subject.name }}</h6>
                                <small class="text-muted">{{ subject.teacherPersona.name }}</small>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>

            {# Chat Window #}
            <div class="chat-window">
                <div class="chat-header px-4 py-3">
                    <div class="d-flex align-items-center">
                        <div id="current-subject-info">
                            <h5 class="mb-1">{% trans %}SELECT_SUBJECT{% endtrans %}</h5>
                            <div class="connection-status">
                                <i class="bi bi-circle-fill text-success"></i>
                                <span>{% trans %}CONNECTED{% endtrans %}</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="chat-messages" id="chat-messages"></div>

                <div class="chat-input">
                    <div class="input-group">
                        <textarea class="form-control" id="message-input" rows="1" placeholder="{% trans %}TYPE_MESSAGE{% endtrans %}"></textarea>
                        <button class="btn btn-primary" id="send-button" type="button">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {# Error Container #}
    <div id="error-container" class="toast-container">
        <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="error-message"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>

    {# Bootstrap JS Bundle #}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    {# WebSocket JS #}
    <script src="{{ asset('assets/js/chat/websocket.js') }}"></script>
    <script>
        // Initialize WebSocket configuration
        window.WS_CONFIG = {
            reconnectAttempts: 5,
            reconnectDelay: 3000,
            debug: {{ app.debug ? 'true' : 'false' }}
        };

        document.addEventListener('DOMContentLoaded', function() {
            const chatSocket = new WebSocket('{{ websocket_url }}');
            const studentToken = '{{ student_token }}';
            const errorContainer = document.getElementById('error-container');
            const errorMessage = document.getElementById('error-message');
            const toast = new bootstrap.Toast(errorContainer.querySelector('.toast'));
            let currentSubjectId = null;

            function showError(message) {
                errorMessage.textContent = message;
                toast.show();
            }

            function appendMessage(message) {
                const messagesContainer = document.getElementById('chat-messages');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.isOutgoing ? 'outgoing' : 'incoming'}`;
                
                const content = document.createElement('div');
                content.className = 'message-content';
                content.textContent = message.content;
                
                const time = document.createElement('div');
                time.className = 'message-time';
                time.textContent = message.time;
                
                messageDiv.appendChild(content);
                messageDiv.appendChild(time);
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            // WebSocket event handlers
            chatSocket.addEventListener('open', () => {
                chatSocket.send(JSON.stringify({
                    type: 'auth',
                    token: studentToken
                }));
            });

            chatSocket.addEventListener('message', (event) => {
                const data = JSON.parse(event.data);
                
                switch(data.type) {
                    case 'message':
                        appendMessage({
                            content: data.content,
                            time: new Date().toLocaleTimeString(),
                            isOutgoing: false
                        });
                        break;
                    case 'error':
                        showError(data.message);
                        break;
                }
            });

            chatSocket.addEventListener('close', () => {
                showError('{% trans %}CONNECTION_LOST{% endtrans %}');
            });

            chatSocket.addEventListener('error', () => {
                showError('{% trans %}CONNECTION_ERROR{% endtrans %}');
            });

            // Subject selection
            document.querySelectorAll('.subject-item').forEach(item => {
                item.addEventListener('click', () => {
                    document.querySelectorAll('.subject-item').forEach(i => i.classList.remove('active'));
                    item.classList.add('active');
                    currentSubjectId = item.dataset.subjectId;
                    
                    const subjectName = item.querySelector('h6').textContent;
                    document.querySelector('#current-subject-info h5').textContent = subjectName;
                    
                    chatSocket.send(JSON.stringify({
                        type: 'join',
                        subjectId: currentSubjectId
                    }));
                });
            });

            // Message sending
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');

            function sendMessage() {
                const content = messageInput.value.trim();
                if (!content || !currentSubjectId) return;

                chatSocket.send(JSON.stringify({
                    type: 'message',
                    content: content,
                    subjectId: currentSubjectId
                }));

                appendMessage({
                    content: content,
                    time: new Date().toLocaleTimeString(),
                    isOutgoing: true
                });

                messageInput.value = '';
            }

            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Subject search
            const searchInput = document.getElementById('subject-search');
            searchInput.addEventListener('input', () => {
                const query = searchInput.value.toLowerCase();
                document.querySelectorAll('.subject-item').forEach(item => {
                    const name = item.querySelector('h6').textContent.toLowerCase();
                    const teacher = item.querySelector('small').textContent.toLowerCase();
                    item.style.display = name.includes(query) || teacher.includes(query) ? '' : 'none';
                });
            });

            {% if needsSetup %}
            const setupModal = new bootstrap.Modal(document.getElementById('setup-modal'));
            setupModal.show();
            {% endif %}
        });
    </script>
</body>
</html>
