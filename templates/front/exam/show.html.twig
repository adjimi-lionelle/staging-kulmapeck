{% extends "front/base.html.twig" %}

{% block title %} - Courses{% endblock %}

{% block script %}
    <!-- PDF.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        // Set worker path for PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
        
        // Disable keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.target.closest('#pdfViewerContainer')) {
                if ((e.ctrlKey || e.metaKey) && (e.key === 's' || e.key === 'p' || e.key === 'P')) {
                    e.preventDefault();
                }
            }
        });

        // Apply theme to PDF viewer
        function applyThemeToPdfViewer() {
            const theme = document.documentElement.getAttribute('data-bs-theme');
            const viewer = document.getElementById('pdfViewerContainer');
            if (viewer) {
                viewer.classList.toggle('dark-theme', theme === 'dark');
            }
        }

        // Listen for theme changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'data-bs-theme') {
                    applyThemeToPdfViewer();
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-bs-theme']
        });
    </script>
    <style>
        #pdfViewerContainer {
            width: 100%;
            height: 800px;
            border: none;
            background-color: #f8f9fa;
        }
        #pdfViewerContainer.dark-theme {
            background-color: #2b2b2b;
            filter: invert(1) hue-rotate(180deg);
        }
        #pdfViewerContainer.dark-theme:hover {
            cursor: not-allowed;
        }
        .pdf-container {
            position: relative;
            width: 100%;
            height: 800px;
            overflow: hidden;
            border-radius: 0.5rem;
        }
        .pdf-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 10;
            pointer-events: none;
        }
    </style>
{% endblock %}

{% block mainContent %}
    <!-- Main Content START -->
    <section class="pb-0 pt-4 pb-md-5">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <!-- Title and Info START -->
                    <div class="row">
                        <!-- Avatar and Share -->
                        <div class="col-lg-3 align-items-center mt-4 mt-lg-5 order-2 order-lg-1">
                            <div class="text-lg-center">
                                <!-- Author info -->
                                <div class="position-relative">
                                    <!-- Avatar -->
                                    <div class="avatar avatar-xxl">
                                        <img class="avatar-img rounded-circle" src="{{ asset(exam.user.personne.avatarPath) }}" alt="avatar">
                                    </div>
                                    <a href="#" class="h5 stretched-link mt-2 mb-0 d-block">{{ exam.user.personne.nomComplet }}</a>
                                    <p class="mb-2">Editor at kulmapeck</p>
                                </div>
                                <!-- Info -->
                                <ul class="list-inline list-unstyled">
                                    <li class="list-inline-item d-lg-block my-lg-2">{{ exam.publishedAt|date("d/m/Y - H:i:s") }}</li>
                                    {% if display is not same as 'correction' %}
                                        <li class="list-inline-item d-lg-block my-lg-2"><a href="{{ url("app_front_exam_show", {reference: exam.reference, display: 'correction'}) }}" class="btn btn-success-soft">{% trans %}SHOWANSWER_KEY{% endtrans %}</a></li>
                                    {% else %}
                                        <li class="list-inline-item d-lg-block my-lg-2"><a href="{{ url("app_front_exam_show", {reference: exam.reference, display: 'subject'}) }}" class="btn btn-primary-soft">{% trans %}BACKTOSUBJECT_KEY{% endtrans %}</a></li>
                                    {% endif %}
                                </ul>
                            </div>
                        </div>

                        <!-- Content -->
                        <div class="col-lg-9 order-1">
                            <!-- Pre title -->
                            <span class="badge text-bg-primary">{{ exam.classe.name }}</span><span class="mx-2">|</span><div class="badge text-bg-success">{{ exam.category.name }}</div>
                            <!-- Title -->
                            <h1 class="mt-2 mb-0 display-5">{{ exam.title }}</h1>
                            <!-- Info -->
                            <p class="mt-2">{{ exam.description }}</p>
                        </div>
                    </div>
                    <!-- Title and Info END -->

                    <!-- Debug info (only visible in dev) -->
                    {% if app.environment == 'dev' %}
                        <div class="alert alert-info m-3">
                            <h5>Debug Information:</h5>
                            <pre>
                                data variable: {{ dump(data) }}
                                display mode: {{ dump(display) }}
                                exam info: {{ dump(exam) }}
                            </pre>
                        </div>
                    {% endif %}

                    <!-- PDF Viewer START -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <div id="pdfViewerContainer" style="height: 800px; position: relative;">
                                        <canvas id="pdfViewer"></canvas>
                                        <div id="loadingMessage" class="text-center p-3">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="mt-2">Loading PDF...</p>
                                        </div>
                                        <div id="errorMessage" class="alert alert-danger m-3" style="display: none;">
                                            <h4>Error loading PDF</h4>
                                            <p id="errorText"></p>
                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>
                                            <small id="errorDetails"></small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- PDF Viewer END -->

                    <script>
                        // Initialize PDF viewer
                        async function initPdfViewer() {
                            const loadingMessage = document.getElementById('loadingMessage');
                            const errorMessage = document.getElementById('errorMessage');
                            const errorText = document.getElementById('errorText');
                            const errorDetails = document.getElementById('errorDetails');
                            const pdfUrl = "{{ url('app_exam_file', {'filename': data}) }}";

                            try {
                                console.log('Loading PDF from:', pdfUrl);
                                loadingMessage.style.display = 'block';
                                errorMessage.style.display = 'none';

                                // Load the PDF document
                                const loadingTask = pdfjsLib.getDocument({
                                    url: pdfUrl,
                                    withCredentials: true
                                });

                                // Add loading progress
                                loadingTask.onProgress = function(progress) {
                                    const percent = (progress.loaded / progress.total) * 100;
                                    console.log(`Loading: ${Math.round(percent)}%`);
                                };

                                const pdf = await loadingTask.promise;
                                console.log('PDF loaded successfully');

                                // Get the first page
                                const page = await pdf.getPage(1);
                                const canvas = document.getElementById('pdfViewer');
                                const context = canvas.getContext('2d');

                                // Calculate scale to fit width
                                const container = canvas.parentElement;
                                const desiredWidth = container.clientWidth - 40; // 20px padding on each side
                                const viewport = page.getViewport({ scale: 1 });
                                const scale = desiredWidth / viewport.width;
                                const scaledViewport = page.getViewport({ scale });

                                // Set canvas size
                                canvas.width = scaledViewport.width;
                                canvas.height = scaledViewport.height;
                                canvas.style.width = '100%';
                                canvas.style.height = 'auto';

                                // Render PDF page
                                await page.render({
                                    canvasContext: context,
                                    viewport: scaledViewport
                                }).promise;

                                console.log('PDF rendered successfully');
                                loadingMessage.style.display = 'none';

                            } catch (error) {
                                console.error('Error loading PDF:', error);
                                loadingMessage.style.display = 'none';
                                errorMessage.style.display = 'block';
                                errorText.textContent = error.message;
                                errorDetails.textContent = `Technical details: ${error.name}`;

                                // Log additional details
                                const response = await fetch(pdfUrl);
                                console.log('Response status:', response.status);
                                console.log('Response headers:', response.headers);
                                const contentType = response.headers.get('content-type');
                                console.log('Content-Type:', contentType);
                            }
                        }

                        // Initialize when document is ready
                        document.addEventListener('DOMContentLoaded', initPdfViewer);

                        // Prevent right-click
                        document.getElementById('pdfViewerContainer').addEventListener('contextmenu', function(e) {
                            e.preventDefault();
                        });
                    </script>

                    <style>
                        #pdfViewerContainer {
                            background: #f8f9fa;
                            border-radius: 4px;
                            overflow: auto;
                        }
                        #pdfViewer {
                            display: block;
                            margin: 20px auto;
                            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                        }
                        [data-bs-theme="dark"] #pdfViewerContainer {
                            background: #2b2b2b;
                        }
                        [data-bs-theme="dark"] #pdfViewer {
                            filter: invert(1) hue-rotate(180deg);
                        }
                    </style>
                </div>
            </div>
        </div>
    </section>

    {{ include('front/includes/_newsletterorange.html.twig') }}

    {% if courses is defined and courses is not empty %}
        {{ include('front/exam/_related_courses.html.twig') }}
    {% endif %}
{% endblock %}