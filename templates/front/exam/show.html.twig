{% extends "front/base.html.twig" %}

{% block title %} - Courses{% endblock %}

{% block script %}
    <!-- PDF.js CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        // Set worker path
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
    </script>
{% endblock %}

{% block mainContent %}
    <!-- Main Content START -->
    <section class="pb-0 pt-4 pb-md-5">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <!-- Title and Info START -->
                    <div class="row">
                        <!-- Avatar and Share -->
                        <div class="col-lg-3 align-items-center mt-4 mt-lg-5 order-2 order-lg-1">
                            <div class="text-lg-center">
                                <!-- Author info -->
                                <div class="position-relative">
                                    <!-- Avatar -->
                                    <div class="avatar avatar-xxl">
                                        <img class="avatar-img rounded-circle" src="{{ asset(exam.user.personne.avatarPath) }}" alt="avatar">
                                    </div>
                                    <a href="#" class="h5 stretched-link mt-2 mb-0 d-block">{{ exam.user.personne.nomComplet }}</a>
                                    <p class="mb-2">Editor at kulmapeck</p>
                                </div>
                                <!-- Info -->
                                <ul class="list-inline list-unstyled">
                                    <li class="list-inline-item d-lg-block my-lg-2">{{ exam.publishedAt|date("d/m/Y - H:i:s") }}</li>
                                    {% if display is not same as 'correction' %}
                                        <li class="list-inline-item d-lg-block my-lg-2"><a href="{{ url("app_front_exam_show", {reference: exam.reference, display: 'correction'}) }}" class="btn btn-success-soft">{% trans %}SHOWANSWER_KEY{% endtrans %}</a></li>
                                    {% else %}
                                        <li class="list-inline-item d-lg-block my-lg-2"><a href="{{ url("app_front_exam_show", {reference: exam.reference, display: 'subject'}) }}" class="btn btn-primary-soft">{% trans %}BACKTOSUBJECT_KEY{% endtrans %}</a></li>
                                    {% endif %}
                                </ul>
                            </div>
                        </div>

                        <!-- Content -->
                        <div class="col-lg-9 order-1">
                            <!-- Pre title -->
                            <span class="badge text-bg-primary">{{ exam.classe.name }}</span><span class="mx-2">|</span><div class="badge text-bg-success">{{ exam.category.name }}</div>
                            <!-- Title -->
                            <h1 class="mt-2 mb-0 display-5">{{ exam.title }}</h1>
                            <!-- Info -->
                            <p class="mt-2">{{ exam.description }}</p>
                        </div>
                    </div>
                    <!-- Title and Info END -->

                    <!-- Debug info (only visible in dev) -->
                    {% if app.environment == 'dev' %}
                        <div class="alert alert-info m-3">
                            <h5>Debug Information:</h5>
                            <pre>
                                data variable: {{ dump(data) }}
                                display mode: {{ dump(display) }}
                                exam info: {{ dump(exam) }}
                            </pre>
                        </div>
                    {% endif %}

                    <!-- PDF Viewer START -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-body">
                                    <div id="pdfViewerContainer" class="position-relative" style="height: 800px;">
                                        <!-- Loading spinner -->
                                        <div id="loadingSpinner" class="position-absolute top-50 start-50 translate-middle text-center">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="mt-2">Loading PDF...</p>
                                        </div>
                                        
                                        <!-- Error message -->
                                        <div id="errorMessage" class="alert alert-danger m-3 d-none">
                                            <h4>Error loading PDF</h4>
                                            <p id="errorText"></p>
                                        </div>
                                        
                                        <!-- PDF canvas -->
                                        <div id="pdfContainer" class="overflow-auto h-100">
                                            <canvas id="pdfCanvas"></canvas>
                                        </div>
                                        
                                        <!-- Navigation controls -->
                                        <div id="navigationControls" class="position-fixed bottom-0 start-50 translate-middle-x mb-3 bg-light p-2 rounded shadow d-none">
                                            <button id="prevPage" class="btn btn-sm btn-secondary me-2">&lt; Previous</button>
                                            <span id="pageInfo" class="mx-2">Page <span id="currentPage">0</span> of <span id="totalPages">0</span></span>
                                            <button id="nextPage" class="btn btn-sm btn-secondary ms-2">Next &gt;</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <script>
                        let pdfDoc = null;
                        let pageNum = 1;
                        let pageRendering = false;
                        let pageNumPending = null;
                        let scale = 1.5;
                        
                        async function renderPage(num) {
                            if (pageRendering) {
                                pageNumPending = num;
                                return;
                            }
                            
                            pageRendering = true;
                            const page = await pdfDoc.getPage(num);
                            
                            const canvas = document.getElementById('pdfCanvas');
                            const ctx = canvas.getContext('2d');
                            
                            // Calculate scale to fit width
                            const container = document.getElementById('pdfContainer');
                            const desiredWidth = container.clientWidth - 40;
                            const viewport = page.getViewport({ scale: 1 });
                            scale = desiredWidth / viewport.width;
                            const scaledViewport = page.getViewport({ scale });
                            
                            canvas.width = scaledViewport.width;
                            canvas.height = scaledViewport.height;
                            
                            try {
                                await page.render({
                                    canvasContext: ctx,
                                    viewport: scaledViewport
                                }).promise;
                                
                                pageRendering = false;
                                
                                if (pageNumPending !== null) {
                                    renderPage(pageNumPending);
                                    pageNumPending = null;
                                }
                                
                                // Update page counters
                                document.getElementById('currentPage').textContent = num;
                            } catch (error) {
                                console.error('Error rendering page:', error);
                                showError('Failed to render PDF page: ' + error.message);
                            }
                        }
                        
                        function showError(message) {
                            const errorDiv = document.getElementById('errorMessage');
                            const errorText = document.getElementById('errorText');
                            errorDiv.classList.remove('d-none');
                            errorText.textContent = message;
                            document.getElementById('loadingSpinner').classList.add('d-none');
                        }
                        
                        async function initPdfViewer() {
                            try {
                                const loadingSpinner = document.getElementById('loadingSpinner');
                                const navigationControls = document.getElementById('navigationControls');
                                const pdfUrl = "{{ url('app_exam_file', {'filename': data}) }}";
                                
                                // Load the PDF
                                pdfDoc = await pdfjsLib.getDocument({
                                    url: pdfUrl,
                                    withCredentials: true
                                }).promise;
                                
                                // Show navigation if more than one page
                                if (pdfDoc.numPages > 1) {
                                    document.getElementById('totalPages').textContent = pdfDoc.numPages;
                                    navigationControls.classList.remove('d-none');
                                    
                                    // Add navigation handlers
                                    document.getElementById('prevPage').onclick = () => {
                                        if (pageNum <= 1) return;
                                        pageNum--;
                                        renderPage(pageNum);
                                    };
                                    
                                    document.getElementById('nextPage').onclick = () => {
                                        if (pageNum >= pdfDoc.numPages) return;
                                        pageNum++;
                                        renderPage(pageNum);
                                    };
                                }
                                
                                // Initial render
                                await renderPage(pageNum);
                                loadingSpinner.classList.add('d-none');
                                
                            } catch (error) {
                                console.error('Error loading PDF:', error);
                                showError('Failed to load PDF: ' + error.message);
                            }
                        }
                        
                        // Initialize when document is ready
                        document.addEventListener('DOMContentLoaded', function() {
                            initPdfViewer();
                            
                            // Prevent right-click
                            document.getElementById('pdfViewerContainer').addEventListener('contextmenu', function(e) {
                                e.preventDefault();
                            });
                            
                            // Prevent keyboard shortcuts
                            document.addEventListener('keydown', function(e) {
                                if ((e.ctrlKey || e.metaKey) && (e.key === 's' || e.key === 'p' || e.key === 'P')) {
                                    e.preventDefault();
                                }
                            });
                        });
                        
                        // Handle window resize
                        let resizeTimeout;
                        window.addEventListener('resize', function() {
                            clearTimeout(resizeTimeout);
                            resizeTimeout = setTimeout(() => {
                                renderPage(pageNum);
                            }, 100);
                        });
                    </script>

                    <style>
                        #pdfViewerContainer {
                            background: #f8f9fa;
                            border-radius: 4px;
                            overflow: hidden;
                        }
                        #pdfContainer {
                            padding: 20px;
                            text-align: center;
                        }
                        #pdfCanvas {
                            max-width: 100%;
                            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                        }
                        #navigationControls {
                            z-index: 1000;
                        }
                        [data-bs-theme="dark"] #pdfViewerContainer {
                            background: #2b2b2b;
                        }
                        [data-bs-theme="dark"] #pdfCanvas {
                            filter: invert(1) hue-rotate(180deg);
                        }
                    </style>
                </div>
            </div>
        </div>
    </section>

    {{ include('front/includes/_newsletterorange.html.twig') }}

    {% if courses is defined and courses is not empty %}
        {{ include('front/exam/_related_courses.html.twig') }}
    {% endif %}
{% endblock %}