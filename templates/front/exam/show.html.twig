{% extends "front/base.html.twig" %}

{% block title %} - Courses{% endblock %}

{% block script %}
    <!-- PDF.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        // Set worker path for PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
        
        // Disable right-click
        document.addEventListener('contextmenu', function(e) {
            if (e.target.closest('#pdfViewer')) {
                e.preventDefault();
            }
        });

        // Disable keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.target.closest('#pdfViewer')) {
                if ((e.ctrlKey || e.metaKey) && (e.key === 's' || e.key === 'p' || e.key === 'P')) {
                    e.preventDefault();
                }
            }
        });

        // Apply theme to PDF viewer
        function applyThemeToPdfViewer() {
            const theme = document.documentElement.getAttribute('data-bs-theme');
            const viewer = document.getElementById('pdfViewer');
            if (viewer) {
                viewer.classList.toggle('dark-theme', theme === 'dark');
            }
        }

        // Listen for theme changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'data-bs-theme') {
                    applyThemeToPdfViewer();
                }
            });
        });

        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-bs-theme']
        });
    </script>
    <style>
        #pdfViewer {
            width: 100%;
            height: 800px;
            border: none;
            background-color: #f8f9fa;
        }
        #pdfViewer.dark-theme {
            background-color: #2b2b2b;
            filter: invert(1) hue-rotate(180deg);
        }
        #pdfViewer.dark-theme:hover {
            cursor: not-allowed;
        }
        .pdf-container {
            position: relative;
            width: 100%;
            height: 800px;
            overflow: hidden;
            border-radius: 0.5rem;
        }
        .pdf-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 10;
            pointer-events: none;
        }
    </style>
{% endblock %}

{% block mainContent %}
    <!-- Main Content START -->
    <section class="pb-0 pt-4 pb-md-5">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <!-- Title and Info START -->
                    <div class="row">
                        <!-- Avatar and Share -->
                        <div class="col-lg-3 align-items-center mt-4 mt-lg-5 order-2 order-lg-1">
                            <div class="text-lg-center">
                                <!-- Author info -->
                                <div class="position-relative">
                                    <!-- Avatar -->
                                    <div class="avatar avatar-xxl">
                                        <img class="avatar-img rounded-circle" src="{{ asset(exam.user.personne.avatarPath) }}" alt="avatar">
                                    </div>
                                    <a href="#" class="h5 stretched-link mt-2 mb-0 d-block">{{ exam.user.personne.nomComplet }}</a>
                                    <p class="mb-2">Editor at kulmapeck</p>
                                </div>
                                <!-- Info -->
                                <ul class="list-inline list-unstyled">
                                    <li class="list-inline-item d-lg-block my-lg-2">{{ exam.publishedAt|date("d/m/Y - H:i:s") }}</li>
                                    {% if display is not same as 'correction' %}
                                        <li class="list-inline-item d-lg-block my-lg-2"><a href="{{ url("app_front_exam_show", {reference: exam.reference, display: 'correction'}) }}" class="btn btn-success-soft">{% trans %}SHOWANSWER_KEY{% endtrans %}</a></li>
                                    {% else %}
                                        <li class="list-inline-item d-lg-block my-lg-2"><a href="{{ url("app_front_exam_show", {reference: exam.reference, display: 'subject'}) }}" class="btn btn-primary-soft">{% trans %}BACKTOSUBJECT_KEY{% endtrans %}</a></li>
                                    {% endif %}
                                </ul>
                            </div>
                        </div>

                        <!-- Content -->
                        <div class="col-lg-9 order-1">
                            <!-- Pre title -->
                            <span class="badge text-bg-primary">{{ exam.classe.name }}</span><span class="mx-2">|</span><div class="badge text-bg-success">{{ exam.category.name }}</div>
                            <!-- Title -->
                            <h1 class="mt-2 mb-0 display-5">{{ exam.title }}</h1>
                            <!-- Info -->
                            <p class="mt-2">{{ exam.description }}</p>
                        </div>
                    </div>
                    <!-- Title and Info END -->

                    <!-- Debug info (only visible in dev) -->
                    {% if app.environment == 'dev' %}
                        <div class="alert alert-info m-3">
                            <h5>Debug Information:</h5>
                            <pre>
                                data variable: {{ dump(data) }}
                                display mode: {{ dump(display) }}
                                exam info: {{ dump(exam) }}
                            </pre>
                        </div>
                    {% endif %}

                    <!-- PDF Viewer START -->
                    <div class="row mt-4">
                        <div class="col-xl-10 mx-auto">
                            <div class="card overflow-hidden h-800px rounded-3">
                                <div class="pdf-container">
                                    <canvas id="pdfViewer"></canvas>
                                    <div class="pdf-overlay"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- PDF Viewer END -->
                </div>
            </div>
        </div>
    </section>

    <script>
        // Load and render PDF
        async function loadPDF() {
            const url = "{{ url('app_exam_file', {'filename': data}) }}";
            console.log('Attempting to load PDF from:', url); 
            
            try {
                // Create loading task
                const loadingTask = pdfjsLib.getDocument({
                    url: url,
                    withCredentials: true
                });
                console.log('PDF loading task created');
                
                // Add progress callback
                loadingTask.onProgress = function(progress) {
                    console.log('Loading progress:', Math.round(progress.loaded / progress.total * 100), '%');
                };
                
                // Load document
                const pdf = await loadingTask.promise;
                console.log('PDF loaded successfully, number of pages:', pdf.numPages);
                
                // Get the first page
                const page = await pdf.getPage(1);
                console.log('First page retrieved');
                
                // Prepare canvas
                const canvas = document.getElementById('pdfViewer');
                const context = canvas.getContext('2d');
                
                // Calculate optimal scale based on container width
                const container = canvas.parentElement;
                const containerWidth = container.clientWidth;
                const viewport = page.getViewport({ scale: 1.0 });
                const scale = containerWidth / viewport.width;
                const scaledViewport = page.getViewport({ scale: scale });
                
                // Set canvas dimensions
                canvas.height = scaledViewport.height;
                canvas.width = scaledViewport.width;
                
                // Render PDF page
                const renderContext = {
                    canvasContext: context,
                    viewport: scaledViewport
                };
                
                console.log('Starting PDF render');
                await page.render(renderContext);
                console.log('PDF rendered successfully');
                
                // Apply current theme
                applyThemeToPdfViewer();
                
            } catch (error) {
                console.error('Error loading PDF:', error);
                const canvas = document.getElementById('pdfViewer');
                const container = canvas.parentElement;
                container.innerHTML = `
                    <div class="alert alert-danger m-3">
                        <h4>Error loading PDF</h4>
                        <p>${error.message}</p>
                        <p>Please try refreshing the page. If the problem persists, contact support.</p>
                        <small>Technical details: ${error.name}</small>
                    </div>
                `;
            }
        }

        // Call loadPDF when document is ready
        document.addEventListener('DOMContentLoaded', loadPDF);
    </script>

    {{ include('front/includes/_newsletterorange.html.twig') }}

    {% if courses is defined and courses is not empty %}
        {{ include('front/exam/_related_courses.html.twig') }}
    {% endif %}
{% endblock %}