{% extends "front/base.html.twig" %}

{% block title %} - Chat{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('assets/css/chat.css') }}">
{% endblock %}

{% block mainContent %}
    {% if needsSetup is defined and needsSetup %}
        {% include 'front/chat/_setup_modal.html.twig' with {
            'classes': classes,
            'specialites': specialites,
            'eleve': eleve
        } %}
        <section class="pt-0">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="text-center mt-5">
                            <h3>{% trans %}WELCOME_TO_CHAT_KEY{% endtrans %}</h3>
                            <p>{% trans %}PLEASE_SETUP_PROFILE_KEY{% endtrans %}</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    {% else %}
        <section class="pt-0">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12">
                        <div class="chat-wrapper">
                            <div class="chat-container">
                                <!-- Groups column -->
                                <div class="chat-sidebar">
                                    <div class="chat-sidebar-header">
                                        <h5>{% trans %}DISCUSSIONS_KEY{% endtrans %}</h5>
                                        <input type="text" class="search-bar" placeholder="{% trans %}SEARCH_KEY{% endtrans %}">
                                    </div>
                                    <div id="group-list" class="chat-group-list">
                                        {% if groups is not defined or groups is empty %}
                                            <div class="text-center mt-3 text-muted">
                                                <p>{% trans %}NO_GROUPS_YET_KEY{% endtrans %}</p>
                                            </div>
                                        {% else %}
                                            {% for group in groups %}
                                                <div class="chat-group" data-group-id="{{ group.id }}">
                                                    <div class="group-info">
                                                        <h6>{{ group.name }}</h6>
                                                        <p>{{ group.matiere.nom }}</p>
                                                    </div>
                                                </div>
                                            {% endfor %}
                                        {% endif %}
                                    </div>
                                </div>

                                <!-- Main chat column -->
                                <div class="chat-main">
                                    <div class="chat-main-header">
                                        <h5 class="chat-title" id="chat-title">{% trans %}SELECT_GROUP_TO_CHAT_KEY{% endtrans %}</h5>
                                    </div>
                                    <div class="chat-messages" id="chat-messages">
                                        <p class="welcome-message">{% trans %}WELCOME_MESSAGE_KEY{% endtrans %}</p>
                                    </div>
                                    <div id="chat-input-area" class="chat-input-area d-none">
                                        <input type="text" id="chat-message" class="chat-input" placeholder="{% trans %}WRITE_MESSAGE_KEY{% endtrans %}" disabled>
                                        <button id="send-message" class="chat-send" disabled>
                                            <i class="fas fa-paper-plane"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    {% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatGroups = document.querySelectorAll('.chat-group');
            const chatTitle = document.getElementById('chat-title');
            const chatMessages = document.getElementById('chat-messages');
            const chatInputArea = document.getElementById('chat-input-area');
            const chatInput = document.getElementById('chat-message');
            const sendButton = document.getElementById('send-message');
            let activeGroup = null;

            // Handle group selection
            chatGroups.forEach(group => {
                group.addEventListener('click', function() {
                    // Remove active class from previous group
                    if (activeGroup) {
                        activeGroup.classList.remove('active');
                    }
                    
                    // Add active class to clicked group
                    this.classList.add('active');
                    activeGroup = this;
                    
                    const groupId = this.dataset.groupId;
                    const groupName = this.querySelector('h6').textContent;
                    
                    // Update chat title
                    chatTitle.textContent = groupName;
                    chatTitle.dataset.groupId = groupId;
                    
                    // Show input area
                    chatInputArea.classList.remove('d-none');
                    chatInput.disabled = false;
                    sendButton.disabled = false;
                    
                    // Load messages for this group
                    loadMessages(groupId);
                });
            });

            // Handle message sending
            sendButton.addEventListener('click', sendMessage);
            chatInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                const groupId = chatTitle.dataset.groupId;
                
                // Send message to server
                fetch('/chat/send/' + groupId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear input
                        chatInput.value = '';
                        
                        // Add message to chat
                        addMessage({
                            content: message,
                            isOutgoing: true,
                            time: new Date().toISOString()
                        });
                    }
                });
            }

            function loadMessages(groupId) {
                fetch('/chat/messages/' + groupId)
                    .then(response => response.json())
                    .then(data => {
                        // Clear existing messages
                        chatMessages.innerHTML = '';
                        
                        // Add messages
                        data.messages.forEach(msg => {
                            addMessage(msg);
                        });
                        
                        // Scroll to bottom
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    });
            }

            function addMessage(msg) {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message-item' + (msg.isOutgoing ? ' outgoing' : '');
                
                const content = document.createElement('div');
                content.className = 'message-content';
                content.textContent = msg.content;
                
                const time = document.createElement('div');
                time.className = 'message-time';
                time.textContent = new Date(msg.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                
                messageDiv.appendChild(content);
                messageDiv.appendChild(time);
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Handle search
            const searchBar = document.querySelector('.search-bar');
            searchBar.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                chatGroups.forEach(group => {
                    const groupName = group.querySelector('h6').textContent.toLowerCase();
                    const matiere = group.querySelector('p').textContent.toLowerCase();
                    if (groupName.includes(searchTerm) || matiere.includes(searchTerm)) {
                        group.style.display = '';
                    } else {
                        group.style.display = 'none';
                    }
                });
            });
        });
    </script>
{% endblock %}
